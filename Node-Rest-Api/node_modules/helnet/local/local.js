"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function noop() { }
var HelLocalSocket = (function () {
    function HelLocalSocket(sessionId, server) {
        var _this = this;
        this._onMessage = noop;
        this._onUnreliableMessage = noop;
        this._onClose = noop;
        this._started = false;
        this._closed = false;
        this.open = false;
        this._pendingMessages = [];
        this._handleDrain = function () {
            _this._pendingDrainTimeout = 0;
            for (var i = 0; i < _this._pendingMessages.length; ++i) {
                if (_this._closed) {
                    return;
                }
                var message = _this._pendingMessages[i];
                try {
                    _this._duplex._onMessage(message);
                }
                catch (e) { }
            }
            _this._pendingMessages.length = 0;
        };
        this._pendingUnreliableMessages = [];
        this._handleUnreliableDrain = function () {
            if (_this._closed) {
                return;
            }
            var message = _this._pendingUnreliableMessages.pop();
            _this._duplex._onMessage(message);
        };
        this.sessionId = sessionId;
        this._server = server;
    }
    HelLocalSocket.prototype.start = function (spec) {
        var _this = this;
        setTimeout(function () {
            if (_this._closed) {
                spec.ready.call(_this, 'socket closed');
                return;
            }
            if (_this._started) {
                spec.ready.call(_this, 'socket already started');
                return;
            }
            _this._onMessage = spec.message;
            _this._onUnreliableMessage = spec.unreliableMessage;
            _this._onClose = spec.close;
            _this._started = true;
            _this.open = true;
            spec.ready.call(_this);
        }, 0);
    };
    HelLocalSocket.prototype.send = function (data) {
        this._pendingMessages.push(data);
        if (!this._pendingDrainTimeout) {
            this._pendingDrainTimeout = setTimeout(this._handleDrain, 0);
        }
    };
    HelLocalSocket.prototype.sendUnreliable = function (data) {
        if (this._closed) {
            return;
        }
        this._pendingUnreliableMessages.push(data);
        setTimeout(this._handleUnreliableDrain, 0);
    };
    HelLocalSocket.prototype.close = function () {
        if (this._closed) {
            return;
        }
        this._closed = true;
        this.open = false;
        this._server._removeSocket(this);
        this._onClose();
        this._duplex.close();
    };
    return HelLocalSocket;
}());
exports.HelLocalSocket = HelLocalSocket;
function removeIfExists(array, element) {
    var idx = array.indexOf(element);
    if (idx >= 0) {
        array[idx] = array[array.length - 1];
        array.pop();
    }
}
var HelLocalServer = (function () {
    function HelLocalServer() {
        this.clients = [];
        this._pendingSockets = [];
        this._started = false;
        this._closed = false;
        this.open = false;
    }
    HelLocalServer.prototype._handleConnection = function (socket) {
        if (this.open) {
            this.clients.push(socket);
            this._onConnection(socket);
        }
        else if (this._closed) {
            socket.close();
        }
        else {
            this._pendingSockets.push(socket);
        }
    };
    HelLocalServer.prototype._removeSocket = function (socket) {
        removeIfExists(this.clients, socket);
        removeIfExists(this._pendingSockets, socket);
    };
    HelLocalServer.prototype.start = function (spec) {
        var _this = this;
        setTimeout(function () {
            if (_this._started) {
                return spec.ready.call(_this, 'server already started');
            }
            _this._onConnection = spec.connection;
            _this._started = true;
            _this.open = true;
            spec.ready.call(_this);
            while (_this._pendingSockets.length > 0) {
                var socket = _this._pendingSockets.pop();
                _this._handleConnection(socket);
            }
        }, 0);
    };
    HelLocalServer.prototype.close = function () {
        if (this._started || this._closed) {
            return;
        }
        this.open = false;
        for (var i = this.clients.length - 1; i >= 0; --i) {
            this.clients[i].close();
        }
    };
    return HelLocalServer;
}());
exports.HelLocalServer = HelLocalServer;
function createLocalServer(config) {
    return new HelLocalServer();
}
exports.createLocalServer = createLocalServer;
function createLocalClient(sessionId, spec) {
    var clientSocket = new HelLocalSocket(sessionId, spec.server);
    var serverSocket = new HelLocalSocket(clientSocket.sessionId, spec.server);
    clientSocket._duplex = serverSocket;
    serverSocket._duplex = clientSocket;
    spec.server._handleConnection(serverSocket);
    return clientSocket;
}
exports.createLocalClient = createLocalClient;
//# sourceMappingURL=local.js.map