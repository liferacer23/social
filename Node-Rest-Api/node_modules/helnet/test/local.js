"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tape = require("tape");
var local_1 = require("../local/local");
var DBEvent = (function () {
    function DBEvent(type, payload) {
        this.type = type;
        this.timestamp = Date.now();
        this.payload = payload;
    }
    return DBEvent;
}());
function findEvent(events, pred) {
    for (var i = 0; i < events.length; ++i) {
        if (pred(events[i])) {
            return i;
        }
    }
    return -1;
}
function awaitEvent(events, pred, done, timeout) {
    var endTime = Date.now() + (timeout || Infinity);
    var interval = setInterval(function () {
        var idx = findEvent(events, pred);
        if (idx >= 0) {
            clearInterval(interval);
            done(idx);
            return;
        }
        else if (Date.now() > endTime) {
            clearInterval(interval);
            done(-1);
            return;
        }
    }, 32);
}
function createLogServer() {
    var server = local_1.createLocalServer({});
    var events = [];
    server.start({
        ready: function (err) {
            events.push(new DBEvent('ready', { err: err }));
        },
        connection: function (socket) {
            events.push(new DBEvent('connection', { socket: socket }));
            socket.start({
                ready: function (err) {
                    events.push(new DBEvent('socket ready', {
                        err: err,
                        socket: socket,
                    }));
                },
                message: function (message) {
                    events.push(new DBEvent('message', {
                        message: message,
                        socket: socket,
                    }));
                },
                unreliableMessage: function (message) {
                    events.push(new DBEvent('~message', {
                        message: message,
                        socket: socket,
                    }));
                },
                close: function (err) {
                    events.push(new DBEvent('close', {
                        err: err,
                        socket: socket,
                    }));
                },
            });
        },
    });
    function connect(sessionId) {
        var socket = local_1.createLocalClient(sessionId, { server: server });
        var clientEvents = [];
        socket.start({
            ready: function (err) {
                clientEvents.push(new DBEvent('socket ready', {
                    socket: socket,
                    err: err,
                }));
            },
            message: function (message) {
                clientEvents.push(new DBEvent('message', {
                    message: message,
                    socket: socket,
                }));
            },
            unreliableMessage: function (message) {
                clientEvents.push(new DBEvent('~message', {
                    message: message,
                    socket: socket,
                }));
            },
            close: function (err) {
                clientEvents.push(new DBEvent('close', {
                    err: err,
                    socket: socket,
                }));
            },
        });
        return {
            socket: socket,
            events: clientEvents,
        };
    }
    function close() {
        server.close();
    }
    return {
        server: server,
        events: events,
        connect: connect,
        close: close,
    };
}
tape('create test', function (t) {
    var server = createLogServer();
    var client = server.connect('foo');
    awaitEvent(client.events, function (_a) {
        var type = _a.type;
        return type === 'socket ready';
    }, function (idx) {
        server.close();
        console.log(server.events);
        console.log(client.events);
        t.end();
    });
});
//# sourceMappingURL=local.js.map